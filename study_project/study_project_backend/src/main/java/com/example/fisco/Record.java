package com.example.fisco;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Int256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple5;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple6;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple7;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class Record extends Contract {
    public static final String[] BINARY_ARRAY = {"60806040523480156200001157600080fd5b506110016000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166356004b6a6040805190810160405280601081526020017f5265636f72645f6d61726b636f646532000000000000000000000000000000008152506040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401620001019190620003e2565b602060405180830381600087803b1580156200011c57600080fd5b505af115801562000131573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525062000157919081019062000278565b506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166356004b6a6040805190810160405280600781526020017f52656365697074000000000000000000000000000000000000000000000000008152506040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040162000205919062000430565b602060405180830381600087803b1580156200022057600080fd5b505af115801562000235573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506200025b919081019062000278565b50620004da565b600062000270825162000489565b905092915050565b6000602082840312156200028b57600080fd5b60006200029b8482850162000262565b91505092915050565b6000620002b1826200047e565b808452620002c781602086016020860162000493565b620002d281620004c9565b602085010191505092915050565b6000603182527f757365726e616d652c696d616765626173652c74696d652c7468656d652c706960208301527f645f6d61726b65642c6d61726b636f64650000000000000000000000000000006040830152606082019050919050565b6000600382527f70696400000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600982527f72656365697074494400000000000000000000000000000000000000000000006020830152604082019050919050565b6000601982527f73656c6c657249442c627579657249442c6974656d4e616d65000000000000006020830152604082019050919050565b60006060820190508181036000830152620003fe8184620002a4565b9050818103602083015262000413816200033d565b905081810360408301526200042881620002e0565b905092915050565b600060608201905081810360008301526200044c8184620002a4565b90508181036020830152620004618162000374565b905081810360408301526200047681620003ab565b905092915050565b600081519050919050565b6000819050919050565b60005b83811015620004b357808201518184015260208101905062000496565b83811115620004c3576000848401525b50505050565b6000601f19601f8301169050919050565b61354180620004ea6000396000f300608060405260043610610062576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806311dd88451461006757806339fa66c9146100a95780633e258eef146100e8578063e512ab1e14610125575b600080fd5b34801561007357600080fd5b5061008e6004803603610089919081019061282a565b610162565b6040516100a096959493929190612f81565b60405180910390f35b3480156100b557600080fd5b506100d060048036036100cb919081019061282a565b610e16565b6040516100df93929190612f35565b60405180910390f35b3480156100f457600080fd5b5061010f600480360361010a91908101906128ac565b6116bf565b60405161011c9190612e1d565b60405180910390f35b34801561013157600080fd5b5061014c6004803603610147919081019061299b565b611b7b565b6040516101599190612e75565b60405180910390f35b6060806060806060806000806000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040805190810160405280601081526020017f5265636f72645f6d61726b636f646532000000000000000000000000000000008152506040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161021c9190612e53565b602060405180830381600087803b15801561023657600080fd5b505af115801561024a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061026e91908101906127d8565b93508373ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156102d457600080fd5b505af11580156102e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061030c919081019061275d565b92508273ffffffffffffffffffffffffffffffffffffffff1663cd30a1d18c6040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161036391906131b5565b600060405180830381600087803b15801561037d57600080fd5b505af1158015610391573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff1663e8434e398c856040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016103ec929190612e97565b602060405180830381600087803b15801561040657600080fd5b505af115801561041a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061043e9190810190612786565b915060008273ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156104a657600080fd5b505af11580156104ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506104de9190810190612801565b131515610520576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610517906131ea565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff1663846719e060006040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016105769190612e38565b602060405180830381600087803b15801561059057600080fd5b505af11580156105a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506105c891908101906127af565b90507f6840365b05cad5fab3d3c7f6625e28686065973fa2237425574f9281046f50138173ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161063e9061320a565b600060405180830381600087803b15801561065857600080fd5b505af115801561066c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250610695919081019061286b565b8273ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016106e890613160565b600060405180830381600087803b15801561070257600080fd5b505af1158015610716573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525061073f919081019061286b565b8373ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610792906130b6565b600060405180830381600087803b1580156107ac57600080fd5b505af11580156107c0573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506107e9919081019061286b565b8473ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161083c9061300c565b600060405180830381600087803b15801561085657600080fd5b505af115801561086a573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250610893919081019061286b565b8573ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016108e69061310b565b600060405180830381600087803b15801561090057600080fd5b505af1158015610914573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525061093d919081019061286b565b8673ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016109909061325f565b600060405180830381600087803b1580156109aa57600080fd5b505af11580156109be573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506109e7919081019061286b565b6040516109f996959493929190612f81565b60405180910390a18073ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610a549061320a565b600060405180830381600087803b158015610a6e57600080fd5b505af1158015610a82573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250610aab919081019061286b565b8173ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610afe90613160565b600060405180830381600087803b158015610b18576000","","","565b82525050565b6000612b28826133f7565b808452612b3c8160208601602086016134c3565b612b45816134f6565b602085010191505092915050565b6000612b5e826133ec565b808452612b728160208601602086016134c3565b612b7b816134f6565b602085010191505092915050565b6000600582527f7468656d650000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600882527f73656c6c657249440000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600482527f74696d65000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600a82527f7069645f6d61726b6564000000000000000000000000000000000000000000006020830152604082019050919050565b6000600982527f696d6167656261736500000000000000000000000000000000000000000000006020830152604082019050919050565b6000600382527f70696400000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000601582527f5265636f726420646f6573206e6f7420657869737400000000000000000000006020830152604082019050919050565b6000600882527f757365726e616d650000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600882527f6d61726b636f64650000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600882527f6974656d4e616d650000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600982527f72656365697074494400000000000000000000000000000000000000000000006020830152604082019050919050565b6000600782527f62757965724944000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000602082019050612e326000830184612aff565b92915050565b6000602082019050612e4d6000830184612b0e565b92915050565b60006020820190508181036000830152612e6d8184612b53565b905092915050565b60006020820190508181036000830152612e8f8184612b1d565b905092915050565b60006040820190508181036000830152612eb18185612b1d565b9050612ec06020830184612ae1565b9392505050565b60006040820190508181036000830152612ee18185612b1d565b9050612ef06020830184612af0565b9392505050565b60006060820190508181036000830152612f118186612b1d565b9050612f206020830185612af0565b612f2d6040830184612ae1565b949350505050565b60006060820190508181036000830152612f4f8186612b1d565b90508181036020830152612f638185612b1d565b90508181036040830152612f778184612b1d565b9050949350505050565b600060c0820190508181036000830152612f9b8189612b1d565b90508181036020830152612faf8188612b1d565b90508181036040830152612fc38187612b1d565b90508181036060830152612fd78186612b1d565b90508181036080830152612feb8185612b1d565b905081810360a0830152612fff8184612b1d565b9050979650505050505050565b6000602082019050818103600083015261302581612b89565b9050919050565b6000604082019050818103600083015261304581612b89565b905081810360208301526130598184612b1d565b905092915050565b6000602082019050818103600083015261307a81612bc0565b9050919050565b6000604082019050818103600083015261309a81612bc0565b905081810360208301526130ae8184612b1d565b905092915050565b600060208201905081810360008301526130cf81612bf7565b9050919050565b600060408201905081810360008301526130ef81612bf7565b905081810360208301526131038184612b1d565b905092915050565b6000602082019050818103600083015261312481612c2e565b9050919050565b6000604082019050818103600083015261314481612c2e565b905081810360208301526131588184612b1d565b905092915050565b6000602082019050818103600083015261317981612c65565b9050919050565b6000604082019050818103600083015261319981612c65565b905081810360208301526131ad8184612b1d565b905092915050565b600060408201905081810360008301526131ce81612c9c565b905081810360208301526131e28184612b1d565b905092915050565b6000602082019050818103600083015261320381612cd3565b9050919050565b6000602082019050818103600083015261322381612d0a565b9050919050565b6000604082019050818103600083015261324381612d0a565b905081810360208301526132578184612b1d565b905092915050565b6000602082019050818103600083015261327881612d41565b9050919050565b6000604082019050818103600083015261329881612d41565b905081810360208301526132ac8184612b1d565b905092915050565b600060208201905081810360008301526132cd81612d78565b9050919050565b600060408201905081810360008301526132ed81612d78565b905081810360208301526133018184612b1d565b905092915050565b6000604082019050818103600083015261332281612daf565b905081810360208301526133368184612b1d565b905092915050565b6000602082019050818103600083015261335781612de6565b9050919050565b6000604082019050818103600083015261337781612de6565b9050818103602083015261338b8184612b1d565b905092915050565b6000604051905081810181811067ffffffffffffffff821117156133b657600080fd5b8060405250919050565b600067ffffffffffffffff8211156133d757600080fd5b601f19601f8301169050602081019050919050565b600081519050919050565b600081519050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061343782613402565b9050919050565b600061344982613402565b9050919050565b600061345b82613402565b9050919050565b600061346d82613402565b9050919050565b6000819050919050565b600061348982613402565b9050919050565b600061349b82613402565b9050919050565b60006134ad82613422565b9050919050565b82818337600083830152505050565b60005b838110156134e15780820151818401526020810190506134c6565b838111156134f0576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a72305820c27977cc9d12f6e9a521870f4fd0565ed7dddd8b32d7a930fa2d6998e748a41a6c6578706572696d656e74616cf50037"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","","40518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611b4b90613160565b600060405180830381600087803b158015611b6557600080fd5b505af1158015611b79573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250611ba2919081019061286b565b8173ffffffffffffffffffffffffffffffffffffffff16639bca41e86040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611bf59061310b565b600060405180830381600087803b158015611c0f57600080fd5b505af1158015611c23573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250611c4c919081019061286b565b8273ffffffffffffffffffffffffffffffffffffffff16639bca41e86040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611c9f906130b6565b600060405180830381600087803b158015611cb957600080fd5b505af1158015611ccd573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250611cf6919081019061286b565b965096509650505050509193909250565b6000806000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166359a48b656040805190810160405280600781526020017f52656365697074000000000000000000000000000000000000000000000000008152506040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611db89190612e53565b602060405180830381600087803b158015611dd257600080fd5b505af1158015611de6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611e0a91908101906127d8565b92508273ffffffffffffffffffffffffffffffffffffffff16635887ab246040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015611e7057600080fd5b505af1158015611e84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611ea891908101906127af565b91508173ffffffffffffffffffffffffffffffffffffffff16631a391cb48a6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611eff9190613081565b600060405180830381600087803b158015611f1957600080fd5b505af1158015611f2d573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff16631a391cb4896040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611f869190613180565b600060405180830381600087803b158015611fa057600080fd5b505af1158015611fb4573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff16631a391cb4886040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161200d919061312b565b600060405180830381600087803b15801561202757600080fd5b505af115801561203b573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff16631a391cb4876040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161209491906130d6565b600060405180830381600087803b1580156120ae57600080fd5b505af11580156120c2573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff16634c6f30c08a846040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161211d929190612ec7565b602060405180830381600087803b15801561213757600080fd5b505af115801561214b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061216f9190810190612801565b90507f6d59c886f460fbe56b620441e46d8d8bba69a325a014394bcbbad2c8150752e4816040516121a09190612e1d565b60405180910390a16121b48589888a6121c3565b80935050505095945050505050565b60008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166359a48b656040805190810160405280601081526020017f5265636f72645f6d61726b636f646532000000000000000000000000000000008152506040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016122739190612e53565b602060405180830381600087803b15801561228d57600080fd5b505af11580156122a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506122c591908101906127d8565b92508273ffffffffffffffffffffffffffffffffffffffff1663c74f8caf6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561232b57600080fd5b505af115801561233f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612363919081019061275d565b91508173ffffffffffffffffffffffffffffffffffffffff1663ae763db5876040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016123ba9190613309565b600060405180830381600087803b1580156123d457600080fd5b505af11580156123e8573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663ae763db5866040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612441919061320a565b600060405180830381600087803b15801561245b57600080fd5b505af115801561246f573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff16635887ab246040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156124d757600080fd5b505af11580156124eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061250f91908101906127af565b90508073ffffffffffffffffffffffffffffffffffffffff16631a391cb4856040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016125669190613309565b600060405180830381600087803b15801561258057600080fd5b505af1158015612594573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff1663664b37d68883856040518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016125f193929190612ef7565b602060405180830381600087803b15801561260b57600080fd5b505af115801561261f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506126439190810190612801565b5050505050505050565b6000612659825161342c565b905092915050565b600061266d825161343e565b905092915050565b60006126818251613450565b905092915050565b60006126958251613462565b905092915050565b60006126a98251613474565b905092915050565b600082601f83011215156126c457600080fd5b81356126d76126d2826133c0565b613393565b915080825260208301602083018583830111156126f357600080fd5b6126fe8382846134b4565b50505092915050565b600082601f830112151561271a57600080fd5b815161272d612728826133c0565b613393565b9150808252602083016020830185838301111561274957600080fd5b6127548382846134c3565b50505092915050565b60006020828403121561276f57600080fd5b600061277d8482850161264d565b91505092915050565b60006020828403121561279857600080fd5b60006127a684828501612661565b91505092915050565b6000602082840312156127c157600080fd5b60006127cf84828501612675565b91505092915050565b6000602082840312156127ea57600080fd5b60006127f884828501612689565b91505092915050565b60006020828403121561281357600080fd5b60006128218482850161269d565b91505092915050565b60006020828403121561283c57600080fd5b600082013567ffffffffffffffff81111561285657600080fd5b612862848285016126b1565b91505092915050565b60006020828403121561287d57600080fd5b600082015167ffffffffffffffff81111561289757600080fd5b6128a384828501612707565b91505092915050565b600080600080600060a086880312156128c457600080fd5b600086013567ffffffffffffffff8111156128de57600080fd5b6128ea888289016126b1565b955050602086013567ffffffffffffffff81111561290757600080fd5b612913888289016126b1565b945050604086013567ffffffffffffffff81111561293057600080fd5b61293c888289016126b1565b935050606086013567ffffffffffffffff81111561295957600080fd5b612965888289016126b1565b925050608086013567ffffffffffffffff81111561298257600080fd5b61298e888289016126b1565b9150509295509295909350565b600080600080600080600060e0888a0312156129b657600080fd5b600088013567ffffffffffffffff8111156129d057600080fd5b6129dc8a828b016126b1565b975050602088013567ffffffffffffffff8111156129f957600080fd5b612a058a828b016126b1565b965050604088013567ffffffffffffffff811115612a2257600080fd5b612a2e8a828b016126b1565b955050606088013567ffffffffffffffff811115612a4b57600080fd5b612a578a828b016126b1565b945050608088013567ffffffffffffffff811115612a7457600080fd5b612a808a828b016126b1565b93505060a088013567ffffffffffffffff811115612a9d57600080fd5b612aa98a828b016126b1565b92505060c088013567ffffffffffffffff811115612ac657600080fd5b612ad28a828b016126b1565b91505092959891949750929550565b612aea8161347e565b82525050565b612af981613490565b82525050565b612b0881613422565b82525050565b612b17816134a2","565b82525050565b6000612b28826133f7565b808452612b3c8160208601602086016134c3565b612b45816134f6565b602085010191505092915050565b6000612b5e826133ec565b808452612b728160208601602086016134c3565b612b7b816134f6565b602085010191505092915050565b6000601582527f5265636f726420646f6573206e6f7420657869737400000000000000000000006020830152604082019050919050565b6000600882527f6d61726b636f64650000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600982527f72656365697074494400000000000000000000000000000000000000000000006020830152604082019050919050565b6000600882527f6974656d4e616d650000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600782527f62757965724944000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600882527f73656c6c657249440000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600382527f70696400000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600982527f696d6167656261736500000000000000000000000000000000000000000000006020830152604082019050919050565b6000600482527f74696d65000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600a82527f7069645f6d61726b6564000000000000000000000000000000000000000000006020830152604082019050919050565b6000600882527f757365726e616d650000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600582527f7468656d650000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000602082019050612e326000830184612aff565b92915050565b6000602082019050612e4d6000830184612b0e565b92915050565b60006020820190508181036000830152612e6d8184612b53565b905092915050565b60006020820190508181036000830152612e8f8184612b1d565b905092915050565b60006040820190508181036000830152612eb18185612b1d565b9050612ec06020830184612ae1565b9392505050565b60006040820190508181036000830152612ee18185612b1d565b9050612ef06020830184612af0565b9392505050565b60006060820190508181036000830152612f118186612b1d565b9050612f206020830185612af0565b612f2d6040830184612ae1565b949350505050565b60006060820190508181036000830152612f4f8186612b1d565b90508181036020830152612f638185612b1d565b90508181036040830152612f778184612b1d565b9050949350505050565b600060c0820190508181036000830152612f9b8189612b1d565b90508181036020830152612faf8188612b1d565b90508181036040830152612fc38187612b1d565b90508181036060830152612fd78186612b1d565b90508181036080830152612feb8185612b1d565b905081810360a0830152612fff8184612b1d565b9050979650505050505050565b6000602082019050818103600083015261302581612b89565b9050919050565b6000602082019050818103600083015261304581612bc0565b9050919050565b6000604082019050818103600083015261306581612bc0565b905081810360208301526130798184612b1d565b905092915050565b6000604082019050818103600083015261309a81612bf7565b905081810360208301526130ae8184612b1d565b905092915050565b600060208201905081810360008301526130cf81612c2e565b9050919050565b600060408201905081810360008301526130ef81612c2e565b905081810360208301526131038184612b1d565b905092915050565b6000602082019050818103600083015261312481612c65565b9050919050565b6000604082019050818103600083015261314481612c65565b905081810360208301526131588184612b1d565b905092915050565b6000602082019050818103600083015261317981612c9c565b9050919050565b6000604082019050818103600083015261319981612c9c565b905081810360208301526131ad8184612b1d565b905092915050565b600060408201905081810360008301526131ce81612cd3565b905081810360208301526131e28184612b1d565b905092915050565b6000602082019050818103600083015261320381612d0a565b9050919050565b6000604082019050818103600083015261322381612d0a565b905081810360208301526132378184612b1d565b905092915050565b6000602082019050818103600083015261325881612d41565b9050919050565b6000604082019050818103600083015261327881612d41565b9050818103602083015261328c8184612b1d565b905092915050565b600060208201905081810360008301526132ad81612d78565b9050919050565b600060408201905081810360008301526132cd81612d78565b905081810360208301526132e18184612b1d565b905092915050565b6000602082019050818103600083015261330281612daf565b9050919050565b6000604082019050818103600083015261332281612daf565b905081810360208301526133368184612b1d565b905092915050565b6000602082019050818103600083015261335781612de6565b9050919050565b6000604082019050818103600083015261337781612de6565b9050818103602083015261338b8184612b1d565b905092915050565b6000604051905081810181811067ffffffffffffffff821117156133b657600080fd5b8060405250919050565b600067ffffffffffffffff8211156133d757600080fd5b601f19601f8301169050602081019050919050565b600081519050919050565b600081519050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061343782613402565b9050919050565b600061344982613402565b9050919050565b600061345b82613402565b9050919050565b600061346d82613402565b9050919050565b6000819050919050565b600061348982613402565b9050919050565b600061349b82613402565b9050919050565b60006134ad82613422565b9050919050565b82818337600083830152505050565b60005b838110156134e15780820151818401526020810190506134c6565b838111156134f0576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a723058201570fbbecf5ebd02dedd464a535731ac65f7b6ee3431d301657ddb69110a65c36c6578706572696d656e74616cf50037"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":false,\"inputs\":[{\"name\":\"pid\",\"type\":\"string\"}],\"name\":\"getRecord\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiptID\",\"type\":\"string\"}],\"name\":\"getReceipt\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiptID\",\"type\":\"string\"},{\"name\":\"sellerID\",\"type\":\"string\"},{\"name\":\"buyerID\",\"type\":\"string\"},{\"name\":\"itemName\",\"type\":\"string\"},{\"name\":\"pid\",\"type\":\"string\"}],\"name\":\"TransactionRecord\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pid\",\"type\":\"string\"},{\"name\":\"username\",\"type\":\"string\"},{\"name\":\"imagebase\",\"type\":\"string\"},{\"name\":\"time\",\"type\":\"string\"},{\"name\":\"theme\",\"type\":\"string\"},{\"name\":\"pid_marked\",\"type\":\"string\"},{\"name\":\"markcode\",\"type\":\"string\"}],\"name\":\"addRecord\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"pid\",\"type\":\"string\"}],\"name\":\"AddRecordResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"count\",\"type\":\"int256\"}],\"name\":\"TransactionRecordResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"username\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"imagebase\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"theme\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"pid_marked\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"markcode\",\"type\":\"string\"}],\"name\":\"GetRecordResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sellerID\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"buyerID\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"itemName\",\"type\":\"string\"}],\"name\":\"GetReceiptResult\",\"type\":\"event\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_GETRECORD = "getRecord";

    public static final String FUNC_GETRECEIPT = "getReceipt";

    public static final String FUNC_TRANSACTIONRECORD = "TransactionRecord";

    public static final String FUNC_ADDRECORD = "addRecord";

    public static final Event ADDRECORDRESULT_EVENT = new Event("AddRecordResult", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
    ;

    public static final Event TRANSACTIONRECORDRESULT_EVENT = new Event("TransactionRecordResult", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
    ;

    public static final Event GETRECORDRESULT_EVENT = new Event("GetRecordResult", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event GETRECEIPTRESULT_EVENT = new Event("GetReceiptResult", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    protected Record(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public TransactionReceipt getRecord(String pid) {
        final Function function = new Function(
                FUNC_GETRECORD, 
                Arrays.<Type>asList(new Utf8String(pid)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] getRecord(String pid, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_GETRECORD, 
                Arrays.<Type>asList(new Utf8String(pid)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForGetRecord(String pid) {
        final Function function = new Function(
                FUNC_GETRECORD, 
                Arrays.<Type>asList(new Utf8String(pid)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getGetRecordInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_GETRECORD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple6<String, String, String, String, String, String> getGetRecordOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_GETRECORD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple6<String, String, String, String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (String) results.get(3).getValue(), 
                (String) results.get(4).getValue(), 
                (String) results.get(5).getValue()
                );
    }

    public TransactionReceipt getReceipt(String receiptID) {
        final Function function = new Function(
                FUNC_GETRECEIPT, 
                Arrays.<Type>asList(new Utf8String(receiptID)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] getReceipt(String receiptID, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_GETRECEIPT, 
                Arrays.<Type>asList(new Utf8String(receiptID)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForGetReceipt(String receiptID) {
        final Function function = new Function(
                FUNC_GETRECEIPT, 
                Arrays.<Type>asList(new Utf8String(receiptID)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getGetReceiptInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_GETRECEIPT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple3<String, String, String> getGetReceiptOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_GETRECEIPT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue()
                );
    }

    public TransactionReceipt TransactionRecord(String receiptID, String sellerID, String buyerID, String itemName, String pid) {
        final Function function = new Function(
                FUNC_TRANSACTIONRECORD, 
                Arrays.<Type>asList(new Utf8String(receiptID),
                new Utf8String(sellerID),
                new Utf8String(buyerID),
                new Utf8String(itemName),
                new Utf8String(pid)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] TransactionRecord(String receiptID, String sellerID, String buyerID, String itemName, String pid, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_TRANSACTIONRECORD, 
                Arrays.<Type>asList(new Utf8String(receiptID),
                new Utf8String(sellerID),
                new Utf8String(buyerID),
                new Utf8String(itemName),
                new Utf8String(pid)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForTransactionRecord(String receiptID, String sellerID, String buyerID, String itemName, String pid) {
        final Function function = new Function(
                FUNC_TRANSACTIONRECORD, 
                Arrays.<Type>asList(new Utf8String(receiptID),
                new Utf8String(sellerID),
                new Utf8String(buyerID),
                new Utf8String(itemName),
                new Utf8String(pid)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple5<String, String, String, String, String> getTransactionRecordInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_TRANSACTIONRECORD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple5<String, String, String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (String) results.get(3).getValue(), 
                (String) results.get(4).getValue()
                );
    }

    public Tuple1<BigInteger> getTransactionRecordOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_TRANSACTIONRECORD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt addRecord(String pid, String username, String imagebase, String time, String theme, String pid_marked, String markcode) {
        final Function function = new Function(
                FUNC_ADDRECORD, 
                Arrays.<Type>asList(new Utf8String(pid),
                new Utf8String(username),
                new Utf8String(imagebase),
                new Utf8String(time),
                new Utf8String(theme),
                new Utf8String(pid_marked),
                new Utf8String(markcode)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] addRecord(String pid, String username, String imagebase, String time, String theme, String pid_marked, String markcode, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDRECORD, 
                Arrays.<Type>asList(new Utf8String(pid),
                new Utf8String(username),
                new Utf8String(imagebase),
                new Utf8String(time),
                new Utf8String(theme),
                new Utf8String(pid_marked),
                new Utf8String(markcode)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddRecord(String pid, String username, String imagebase, String time, String theme, String pid_marked, String markcode) {
        final Function function = new Function(
                FUNC_ADDRECORD, 
                Arrays.<Type>asList(new Utf8String(pid),
                new Utf8String(username),
                new Utf8String(imagebase),
                new Utf8String(time),
                new Utf8String(theme),
                new Utf8String(pid_marked),
                new Utf8String(markcode)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple7<String, String, String, String, String, String, String> getAddRecordInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDRECORD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple7<String, String, String, String, String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (String) results.get(3).getValue(), 
                (String) results.get(4).getValue(), 
                (String) results.get(5).getValue(), 
                (String) results.get(6).getValue()
                );
    }

    public Tuple1<String> getAddRecordOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_ADDRECORD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public List<AddRecordResultEventResponse> getAddRecordResultEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ADDRECORDRESULT_EVENT, transactionReceipt);
        ArrayList<AddRecordResultEventResponse> responses = new ArrayList<AddRecordResultEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            AddRecordResultEventResponse typedResponse = new AddRecordResultEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.pid = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeAddRecordResultEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(ADDRECORDRESULT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeAddRecordResultEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(ADDRECORDRESULT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<TransactionRecordResultEventResponse> getTransactionRecordResultEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSACTIONRECORDRESULT_EVENT, transactionReceipt);
        ArrayList<TransactionRecordResultEventResponse> responses = new ArrayList<TransactionRecordResultEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            TransactionRecordResultEventResponse typedResponse = new TransactionRecordResultEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.count = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeTransactionRecordResultEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(TRANSACTIONRECORDRESULT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeTransactionRecordResultEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(TRANSACTIONRECORDRESULT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<GetRecordResultEventResponse> getGetRecordResultEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(GETRECORDRESULT_EVENT, transactionReceipt);
        ArrayList<GetRecordResultEventResponse> responses = new ArrayList<GetRecordResultEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            GetRecordResultEventResponse typedResponse = new GetRecordResultEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.username = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.imagebase = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.time = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.theme = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.pid_marked = (String) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.markcode = (String) eventValues.getNonIndexedValues().get(5).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeGetRecordResultEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(GETRECORDRESULT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeGetRecordResultEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(GETRECORDRESULT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<GetReceiptResultEventResponse> getGetReceiptResultEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(GETRECEIPTRESULT_EVENT, transactionReceipt);
        ArrayList<GetReceiptResultEventResponse> responses = new ArrayList<GetReceiptResultEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            GetReceiptResultEventResponse typedResponse = new GetReceiptResultEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sellerID = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.buyerID = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.itemName = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeGetReceiptResultEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(GETRECEIPTRESULT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeGetReceiptResultEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(GETRECEIPTRESULT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static Record load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new Record(contractAddress, client, credential);
    }

    public static Record deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(Record.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }

    public static class AddRecordResultEventResponse {
        public TransactionReceipt.Logs log;

        public String pid;
    }

    public static class TransactionRecordResultEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger count;
    }

    public static class GetRecordResultEventResponse {
        public TransactionReceipt.Logs log;

        public String username;

        public String imagebase;

        public String time;

        public String theme;

        public String pid_marked;

        public String markcode;
    }

    public static class GetReceiptResultEventResponse {
        public TransactionReceipt.Logs log;

        public String sellerID;

        public String buyerID;

        public String itemName;
    }
}
